swagger: "3.0.0"
openapi: '3.0.0'
info:
  description: "This is the PoiLabs backend API documentation."
  version: "1.0.0"
  title: "PoiLabs Swagger API Documentation"
  termsOfService: "https://www.poilabs.com/en/about-us/"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0"
host: "http://localhost:3000/"
basePath: "/api-docs"
components:
  tags:
    Users:
      description: "User Auth managing APIs"
    Microservices:
      description: "Microservice to test middleware"
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-access-token
  
  schemas:
    User:
      type: "object"
      required:
        - username
        - email
        - password
      properties:
        id:
          type: integer
          description: "Auto generated id"
        username:
          type: string
          description: "Username which is created by the user"
        password:
          type: string
          description: "User password"
        email:
          type: string
          description: "Signed email of the user"
        createdAt:
          type: string
          description: "Auto generated darte that user has signed up"
        updatedAt:
          type: string
          description: "Automatically updated date if the user information has changed"
      example:
        id: 1
        username: "testuser1"
        password: "pwd1"
        email: "testuser@testmail.com"
        createdAt: "2022-09-05 10:56:33.499+03"
        updatedAt: "2022-09-05 10:56:33.499+03"

    UserSignup:
      type: "object"
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: "Username which is created by the user"
        password:
          type: string
          description: "User password"
        email:
          type: string
          description: "Signed email of user"
      example:
        username: "testuser1"
        password: "pwd1"
        email: "testuser1@testmail.com"

    UserLogin:
      type: "object"
      required:
        - email
        - password
      security:
        - basicAuth: []
      properties:
        email:
          type: string
          description: "Signed email of user"
        password:
          type: string
          description: "User password"
      example:
        email: "testmail1@testmail.com"
        password: "pwd1"

    GetService:
      type: "object"
      required:
        - x-access-token
      security:
        - ApiKeyAuth: []
      properties:
        x-access-token:
          type: string
          description: "User Auth Token"
      example:
        x-access-token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjEsImlhdCI6MTY2Mjk2NzgyMCwiZXhwIjoxNjYyOTY4NDIwfQ.QB3zKywKoUKjlQ4c1jN1IDyfzc2wUDsvRI6nMkTTRXs"

security:
  - basicAuth: []
  - ApiKeyAuth: []

#------------------------------------
paths:
  /api/users/signup:
    post:
      summary: "Create a new user"
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'

      responses:
        '200':
          description: "The user has created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignup'
        '500':
          description: "Some server error"
#------------------------------------
  /api/users/login:
    post:
      summary: "Log in existing user"
      tags: [Users]
      security:
        - basicAuth: []
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'

      responses:
        '200':
          description: "The user login successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
        '500':
          description: "Some server error"
#------------------------------------
  /api/services/orders:
    get:
      summary: "Example get CRUD service"
      parameters:
        - in: header
          type: apiKey
          name: x-access-token
          description: "x-access-token in header"
          required: true
          schema:
            type: string
            example: ApiKeyAuth
      tags: [Microservices]
     
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: "The success auth msg"
                        example: "Successful login!"
                      x-access-token:
                        type: string
                        description: "Login token"
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjEsImlhdCI6MTY2Mjk2NzgyMCwiZXhwIjoxNjYyOTY4NDIwfQ.QB3zKywKoUKjlQ4c1jN1IDyfzc2wUDsvRI6nMkTTRXs"
        '500':
          description: "Some server error."